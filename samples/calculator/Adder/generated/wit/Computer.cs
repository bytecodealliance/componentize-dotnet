// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// <auto-generated />
#nullable enable
using System.Runtime.InteropServices;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
namespace ComputerWorld {

    public interface IComputerWorld {
    }

    public readonly struct None {}

    [StructLayout(LayoutKind.Sequential)]
    public readonly struct Result<TOk, TErr>
    {
        public readonly byte Tag;
        private readonly object value;

        private Result(byte tag, object value)
        {
            Tag = tag;
            this.value = value;
        }

        public static Result<TOk, TErr> Ok(TOk ok)
        {
            return new Result<TOk, TErr>(Tags.Ok, ok!);
        }

        public static Result<TOk, TErr> Err(TErr err)
        {
            return new Result<TOk, TErr>(Tags.Err, err!);
        }

        public bool IsOk => Tag == Tags.Ok;
        public bool IsErr => Tag == Tags.Err;

        public TOk AsOk
        {
            get
            {
                if (Tag == Tags.Ok)
                {
                    return (TOk)value;
                }

                throw new ArgumentException("expected k, got " + Tag);
            }
        }

        public TErr AsErr
        {
            get
            {
                if (Tag == Tags.Err)
                {
                    return (TErr)value;
                }

                throw new ArgumentException("expected Err, got " + Tag);
            }
        }

        public class Tags
        {
            public const byte Ok = 0;
            public const byte Err = 1;
        }
    }

    public class Option<T> {
        private static Option<T> none = new ();

        private Option()
        {
            HasValue = false;
        }

        public Option(T v)
        {
            HasValue = true;
            Value = v;
        }

        public static Option<T> None => none;

        [MemberNotNullWhen(true, nameof(Value))]
        public bool HasValue { get; }

        public T? Value { get; }
    }

    public class WitException: Exception {
        public object Value { get; }
        public uint NestingLevel { get; }

        public WitException(object v, uint level)
        {
            Value = v;
            NestingLevel = level;
        }
    }

    public class WitException<T>: WitException {
        public T TypedValue { get { return (T)this.Value;} }

        public WitException(T v, uint level) : base(v!, level)
        {
        }
    }

    public static class InteropReturnArea
    {
        [InlineArray(2)]
        [StructLayout(LayoutKind.Sequential, Pack = 4)]
        internal struct ReturnArea
        {
            private uint buffer;

            internal unsafe nint AddressOfReturnArea()
            {
                return (nint)Unsafe.AsPointer(ref buffer);
            }
        }

        [ThreadStatic]
        [FixedAddressValueType]
        internal static ReturnArea returnArea = default;
    }

    namespace exports {

        public static class ComputerWorld
        {
        }
    }

}
