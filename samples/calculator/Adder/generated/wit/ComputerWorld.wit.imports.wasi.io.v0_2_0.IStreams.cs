// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// <auto-generated />
#nullable enable

using System.Runtime.InteropServices;

namespace ComputerWorld.wit.imports.wasi.io.v0_2_0;

public interface IStreams {

    public class StreamError {
        public readonly byte Tag;
        private readonly object? value;

        private StreamError(byte tag, object? value) {
            this.Tag = tag;
            this.value = value;
        }

        public static StreamError LastOperationFailed(global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error lastOperationFailed) {
            return new StreamError(Tags.LastOperationFailed, lastOperationFailed);
        }

        public static StreamError Closed() {
            return new StreamError(Tags.Closed, null);
        }

        public global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error AsLastOperationFailed
        {
            get
            {
                if (Tag == Tags.LastOperationFailed)
                return (global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error)value!;
                else
                throw new ArgumentException("expected LastOperationFailed, got " + Tag);
            }
        }

        public class Tags {
            public const byte LastOperationFailed = 0;
            public const byte Closed = 1;
        }
    }

    public class InputStream: IDisposable {
        internal int Handle { get; set; }

        public readonly record struct THandle(int Handle);

        public InputStream(THandle handle) {
            Handle = handle.Handle;
        }

        public void Dispose() {
            Dispose(true);
        }

        [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[resource-drop]input-stream"), WasmImportLinkage]
        private static extern void wasmImportResourceDrop(int p0);

        protected virtual void Dispose(bool disposing) {
            if (disposing && Handle != 0) {
                wasmImportResourceDrop(Handle);
                Handle = 0;
            }
        }

        internal static class ReadWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]input-stream.read"), WasmImportLinkage]
            internal static extern void wasmImportRead(int p0, long p1, nint p2);
        }

        public   unsafe byte[] Read(ulong len)
        {
            var handle = this.Handle;

            var retArea = stackalloc uint[3+1];
            var ptr = ((int)retArea) + (4 - 1) & -4;
            ReadWasmInterop.wasmImportRead(handle, unchecked((long)(len)), ptr);

            Result<byte[], global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

            switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                case 0: {

                    var array = new byte[BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))];
                    new Span<byte>((void*)(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 4), 4))), BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))).CopyTo(new Span<byte>(array));

                    lifted6 = Result<byte[], global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(array);
                    break;
                }
                case 1: {

                    global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                    switch (new Span<byte>((void*)(ptr + 4), 1)[0]) {
                        case 0: {
                            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))));

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                            break;
                        }
                        case 1: {

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                            break;
                        }

                        default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 4), 1)[0]}");
                    }

                    lifted6 = Result<byte[], global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                    break;
                }

                default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
            }
            if (lifted6.IsOk)
            {
                var tmp = lifted6.AsOk;
                return tmp;
            }
            else
            {
                throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
            }

        }

        internal static class BlockingReadWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]input-stream.blocking-read"), WasmImportLinkage]
            internal static extern void wasmImportBlockingRead(int p0, long p1, nint p2);
        }

        public   unsafe byte[] BlockingRead(ulong len)
        {
            var handle = this.Handle;

            var retArea = stackalloc uint[3+1];
            var ptr = ((int)retArea) + (4 - 1) & -4;
            BlockingReadWasmInterop.wasmImportBlockingRead(handle, unchecked((long)(len)), ptr);

            Result<byte[], global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

            switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                case 0: {

                    var array = new byte[BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))];
                    new Span<byte>((void*)(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 4), 4))), BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))).CopyTo(new Span<byte>(array));

                    lifted6 = Result<byte[], global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(array);
                    break;
                }
                case 1: {

                    global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                    switch (new Span<byte>((void*)(ptr + 4), 1)[0]) {
                        case 0: {
                            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))));

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                            break;
                        }
                        case 1: {

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                            break;
                        }

                        default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 4), 1)[0]}");
                    }

                    lifted6 = Result<byte[], global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                    break;
                }

                default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
            }
            if (lifted6.IsOk)
            {
                var tmp = lifted6.AsOk;
                return tmp;
            }
            else
            {
                throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
            }

        }

        internal static class SkipWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]input-stream.skip"), WasmImportLinkage]
            internal static extern void wasmImportSkip(int p0, long p1, nint p2);
        }

        public   unsafe ulong Skip(ulong len)
        {
            var handle = this.Handle;

            var retArea = stackalloc ulong[2+1];
            var ptr = ((int)retArea) + (8 - 1) & -8;
            SkipWasmInterop.wasmImportSkip(handle, unchecked((long)(len)), ptr);

            Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

            switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                case 0: {

                    lifted6 = Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(unchecked((ulong)(BitConverter.ToInt64(new Span<byte>((void*)(ptr + 8), 8)))));
                    break;
                }
                case 1: {

                    global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                    switch (new Span<byte>((void*)(ptr + 8), 1)[0]) {
                        case 0: {
                            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 12), 4))));

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                            break;
                        }
                        case 1: {

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                            break;
                        }

                        default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 8), 1)[0]}");
                    }

                    lifted6 = Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                    break;
                }

                default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
            }
            if (lifted6.IsOk)
            {
                var tmp = lifted6.AsOk;
                return tmp;
            }
            else
            {
                throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
            }

        }

        internal static class BlockingSkipWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]input-stream.blocking-skip"), WasmImportLinkage]
            internal static extern void wasmImportBlockingSkip(int p0, long p1, nint p2);
        }

        public   unsafe ulong BlockingSkip(ulong len)
        {
            var handle = this.Handle;

            var retArea = stackalloc ulong[2+1];
            var ptr = ((int)retArea) + (8 - 1) & -8;
            BlockingSkipWasmInterop.wasmImportBlockingSkip(handle, unchecked((long)(len)), ptr);

            Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

            switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                case 0: {

                    lifted6 = Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(unchecked((ulong)(BitConverter.ToInt64(new Span<byte>((void*)(ptr + 8), 8)))));
                    break;
                }
                case 1: {

                    global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                    switch (new Span<byte>((void*)(ptr + 8), 1)[0]) {
                        case 0: {
                            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 12), 4))));

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                            break;
                        }
                        case 1: {

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                            break;
                        }

                        default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 8), 1)[0]}");
                    }

                    lifted6 = Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                    break;
                }

                default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
            }
            if (lifted6.IsOk)
            {
                var tmp = lifted6.AsOk;
                return tmp;
            }
            else
            {
                throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
            }

        }

        internal static class SubscribeWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]input-stream.subscribe"), WasmImportLinkage]
            internal static extern int wasmImportSubscribe(int p0);
        }

        public   unsafe global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IPoll.Pollable Subscribe()
        {
            var handle = this.Handle;
            var result =  SubscribeWasmInterop.wasmImportSubscribe(handle);
            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IPoll.Pollable(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IPoll.Pollable.THandle(result));
            return resource;

        }

    }

    public class OutputStream: IDisposable {
        internal int Handle { get; set; }

        public readonly record struct THandle(int Handle);

        public OutputStream(THandle handle) {
            Handle = handle.Handle;
        }

        public void Dispose() {
            Dispose(true);
        }

        [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[resource-drop]output-stream"), WasmImportLinkage]
        private static extern void wasmImportResourceDrop(int p0);

        protected virtual void Dispose(bool disposing) {
            if (disposing && Handle != 0) {
                wasmImportResourceDrop(Handle);
                Handle = 0;
            }
        }

        internal static class CheckWriteWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]output-stream.check-write"), WasmImportLinkage]
            internal static extern void wasmImportCheckWrite(int p0, nint p1);
        }

        public   unsafe ulong CheckWrite()
        {
            var handle = this.Handle;

            var retArea = stackalloc ulong[2+1];
            var ptr = ((int)retArea) + (8 - 1) & -8;
            CheckWriteWasmInterop.wasmImportCheckWrite(handle, ptr);

            Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

            switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                case 0: {

                    lifted6 = Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(unchecked((ulong)(BitConverter.ToInt64(new Span<byte>((void*)(ptr + 8), 8)))));
                    break;
                }
                case 1: {

                    global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                    switch (new Span<byte>((void*)(ptr + 8), 1)[0]) {
                        case 0: {
                            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 12), 4))));

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                            break;
                        }
                        case 1: {

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                            break;
                        }

                        default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 8), 1)[0]}");
                    }

                    lifted6 = Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                    break;
                }

                default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
            }
            if (lifted6.IsOk)
            {
                var tmp = lifted6.AsOk;
                return tmp;
            }
            else
            {
                throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
            }

        }

        internal static class WriteWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]output-stream.write"), WasmImportLinkage]
            internal static extern void wasmImportWrite(int p0, nint p1, int p2, nint p3);
        }

        public   unsafe void Write(byte[] contents)
        {
            var cleanups = new List<Action>();
            var handle = this.Handle;

            var gcHandle = GCHandle.Alloc(contents, GCHandleType.Pinned);
            var listPtr = gcHandle.AddrOfPinnedObject();
            cleanups.Add(()=> gcHandle.Free());

            var retArea = stackalloc uint[3+1];
            var ptr = ((int)retArea) + (4 - 1) & -4;
            WriteWasmInterop.wasmImportWrite(handle, (nint)listPtr, (contents).Length, ptr);

            Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

            switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                case 0: {

                    lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(new global::ComputerWorld.None());
                    break;
                }
                case 1: {

                    global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                    switch (new Span<byte>((void*)(ptr + 4), 1)[0]) {
                        case 0: {
                            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))));

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                            break;
                        }
                        case 1: {

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                            break;
                        }

                        default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 4), 1)[0]}");
                    }

                    lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                    break;
                }

                default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
            }

            foreach (var cleanup in cleanups)
            {
                cleanup();
            }
            if (lifted6.IsOk)
            {
                var tmp = lifted6.AsOk;
                return ;
            }
            else
            {
                throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
            }

        }

        public   unsafe void Write(Span<byte> contents)
        {
            fixed (void* listPtr = contents)
            {
                var handle = this.Handle;

                var retArea = stackalloc uint[3+1];
                var ptr = ((int)retArea) + (4 - 1) & -4;
                WriteWasmInterop.wasmImportWrite(handle, (nint)listPtr, (contents).Length, ptr);

                Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

                switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                    case 0: {

                        lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(new global::ComputerWorld.None());
                        break;
                    }
                    case 1: {

                        global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                        switch (new Span<byte>((void*)(ptr + 4), 1)[0]) {
                            case 0: {
                                var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))));

                                lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                                break;
                            }
                            case 1: {

                                lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                                break;
                            }

                            default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 4), 1)[0]}");
                        }

                        lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                        break;
                    }

                    default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
                }
                if (lifted6.IsOk)
                {
                    var tmp = lifted6.AsOk;
                    return ;
                }
                else
                {
                    throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
                }
            }

        }

        public   unsafe void Write(Memory<byte> contents)
        {
            fixed (void* listPtr = contents.Span)
            {
                var handle = this.Handle;

                var retArea = stackalloc uint[3+1];
                var ptr = ((int)retArea) + (4 - 1) & -4;
                WriteWasmInterop.wasmImportWrite(handle, (nint)listPtr, (contents).Length, ptr);

                Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

                switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                    case 0: {

                        lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(new global::ComputerWorld.None());
                        break;
                    }
                    case 1: {

                        global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                        switch (new Span<byte>((void*)(ptr + 4), 1)[0]) {
                            case 0: {
                                var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))));

                                lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                                break;
                            }
                            case 1: {

                                lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                                break;
                            }

                            default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 4), 1)[0]}");
                        }

                        lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                        break;
                    }

                    default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
                }
                if (lifted6.IsOk)
                {
                    var tmp = lifted6.AsOk;
                    return ;
                }
                else
                {
                    throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
                }
            }

        }

        internal static class BlockingWriteAndFlushWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]output-stream.blocking-write-and-flush"), WasmImportLinkage]
            internal static extern void wasmImportBlockingWriteAndFlush(int p0, nint p1, int p2, nint p3);
        }

        public   unsafe void BlockingWriteAndFlush(byte[] contents)
        {
            var cleanups = new List<Action>();
            var handle = this.Handle;

            var gcHandle = GCHandle.Alloc(contents, GCHandleType.Pinned);
            var listPtr = gcHandle.AddrOfPinnedObject();
            cleanups.Add(()=> gcHandle.Free());

            var retArea = stackalloc uint[3+1];
            var ptr = ((int)retArea) + (4 - 1) & -4;
            BlockingWriteAndFlushWasmInterop.wasmImportBlockingWriteAndFlush(handle, (nint)listPtr, (contents).Length, ptr);

            Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

            switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                case 0: {

                    lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(new global::ComputerWorld.None());
                    break;
                }
                case 1: {

                    global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                    switch (new Span<byte>((void*)(ptr + 4), 1)[0]) {
                        case 0: {
                            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))));

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                            break;
                        }
                        case 1: {

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                            break;
                        }

                        default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 4), 1)[0]}");
                    }

                    lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                    break;
                }

                default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
            }

            foreach (var cleanup in cleanups)
            {
                cleanup();
            }
            if (lifted6.IsOk)
            {
                var tmp = lifted6.AsOk;
                return ;
            }
            else
            {
                throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
            }

        }

        public   unsafe void BlockingWriteAndFlush(Span<byte> contents)
        {
            fixed (void* listPtr = contents)
            {
                var handle = this.Handle;

                var retArea = stackalloc uint[3+1];
                var ptr = ((int)retArea) + (4 - 1) & -4;
                BlockingWriteAndFlushWasmInterop.wasmImportBlockingWriteAndFlush(handle, (nint)listPtr, (contents).Length, ptr);

                Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

                switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                    case 0: {

                        lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(new global::ComputerWorld.None());
                        break;
                    }
                    case 1: {

                        global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                        switch (new Span<byte>((void*)(ptr + 4), 1)[0]) {
                            case 0: {
                                var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))));

                                lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                                break;
                            }
                            case 1: {

                                lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                                break;
                            }

                            default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 4), 1)[0]}");
                        }

                        lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                        break;
                    }

                    default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
                }
                if (lifted6.IsOk)
                {
                    var tmp = lifted6.AsOk;
                    return ;
                }
                else
                {
                    throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
                }
            }

        }

        public   unsafe void BlockingWriteAndFlush(Memory<byte> contents)
        {
            fixed (void* listPtr = contents.Span)
            {
                var handle = this.Handle;

                var retArea = stackalloc uint[3+1];
                var ptr = ((int)retArea) + (4 - 1) & -4;
                BlockingWriteAndFlushWasmInterop.wasmImportBlockingWriteAndFlush(handle, (nint)listPtr, (contents).Length, ptr);

                Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

                switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                    case 0: {

                        lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(new global::ComputerWorld.None());
                        break;
                    }
                    case 1: {

                        global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                        switch (new Span<byte>((void*)(ptr + 4), 1)[0]) {
                            case 0: {
                                var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))));

                                lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                                break;
                            }
                            case 1: {

                                lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                                break;
                            }

                            default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 4), 1)[0]}");
                        }

                        lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                        break;
                    }

                    default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
                }
                if (lifted6.IsOk)
                {
                    var tmp = lifted6.AsOk;
                    return ;
                }
                else
                {
                    throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
                }
            }

        }

        internal static class FlushWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]output-stream.flush"), WasmImportLinkage]
            internal static extern void wasmImportFlush(int p0, nint p1);
        }

        public   unsafe void Flush()
        {
            var handle = this.Handle;

            var retArea = stackalloc uint[3+1];
            var ptr = ((int)retArea) + (4 - 1) & -4;
            FlushWasmInterop.wasmImportFlush(handle, ptr);

            Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

            switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                case 0: {

                    lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(new global::ComputerWorld.None());
                    break;
                }
                case 1: {

                    global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                    switch (new Span<byte>((void*)(ptr + 4), 1)[0]) {
                        case 0: {
                            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))));

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                            break;
                        }
                        case 1: {

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                            break;
                        }

                        default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 4), 1)[0]}");
                    }

                    lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                    break;
                }

                default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
            }
            if (lifted6.IsOk)
            {
                var tmp = lifted6.AsOk;
                return ;
            }
            else
            {
                throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
            }

        }

        internal static class BlockingFlushWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]output-stream.blocking-flush"), WasmImportLinkage]
            internal static extern void wasmImportBlockingFlush(int p0, nint p1);
        }

        public   unsafe void BlockingFlush()
        {
            var handle = this.Handle;

            var retArea = stackalloc uint[3+1];
            var ptr = ((int)retArea) + (4 - 1) & -4;
            BlockingFlushWasmInterop.wasmImportBlockingFlush(handle, ptr);

            Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

            switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                case 0: {

                    lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(new global::ComputerWorld.None());
                    break;
                }
                case 1: {

                    global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                    switch (new Span<byte>((void*)(ptr + 4), 1)[0]) {
                        case 0: {
                            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))));

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                            break;
                        }
                        case 1: {

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                            break;
                        }

                        default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 4), 1)[0]}");
                    }

                    lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                    break;
                }

                default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
            }
            if (lifted6.IsOk)
            {
                var tmp = lifted6.AsOk;
                return ;
            }
            else
            {
                throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
            }

        }

        internal static class SubscribeWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]output-stream.subscribe"), WasmImportLinkage]
            internal static extern int wasmImportSubscribe(int p0);
        }

        public   unsafe global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IPoll.Pollable Subscribe()
        {
            var handle = this.Handle;
            var result =  SubscribeWasmInterop.wasmImportSubscribe(handle);
            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IPoll.Pollable(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IPoll.Pollable.THandle(result));
            return resource;

        }

        internal static class WriteZeroesWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]output-stream.write-zeroes"), WasmImportLinkage]
            internal static extern void wasmImportWriteZeroes(int p0, long p1, nint p2);
        }

        public   unsafe void WriteZeroes(ulong len)
        {
            var handle = this.Handle;

            var retArea = stackalloc uint[3+1];
            var ptr = ((int)retArea) + (4 - 1) & -4;
            WriteZeroesWasmInterop.wasmImportWriteZeroes(handle, unchecked((long)(len)), ptr);

            Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

            switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                case 0: {

                    lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(new global::ComputerWorld.None());
                    break;
                }
                case 1: {

                    global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                    switch (new Span<byte>((void*)(ptr + 4), 1)[0]) {
                        case 0: {
                            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))));

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                            break;
                        }
                        case 1: {

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                            break;
                        }

                        default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 4), 1)[0]}");
                    }

                    lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                    break;
                }

                default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
            }
            if (lifted6.IsOk)
            {
                var tmp = lifted6.AsOk;
                return ;
            }
            else
            {
                throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
            }

        }

        internal static class BlockingWriteZeroesAndFlushWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]output-stream.blocking-write-zeroes-and-flush"), WasmImportLinkage]
            internal static extern void wasmImportBlockingWriteZeroesAndFlush(int p0, long p1, nint p2);
        }

        public   unsafe void BlockingWriteZeroesAndFlush(ulong len)
        {
            var handle = this.Handle;

            var retArea = stackalloc uint[3+1];
            var ptr = ((int)retArea) + (4 - 1) & -4;
            BlockingWriteZeroesAndFlushWasmInterop.wasmImportBlockingWriteZeroesAndFlush(handle, unchecked((long)(len)), ptr);

            Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted6;

            switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                case 0: {

                    lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(new global::ComputerWorld.None());
                    break;
                }
                case 1: {

                    global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                    switch (new Span<byte>((void*)(ptr + 4), 1)[0]) {
                        case 0: {
                            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4))));

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                            break;
                        }
                        case 1: {

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                            break;
                        }

                        default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 4), 1)[0]}");
                    }

                    lifted6 = Result<None, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                    break;
                }

                default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
            }
            if (lifted6.IsOk)
            {
                var tmp = lifted6.AsOk;
                return ;
            }
            else
            {
                throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted6.AsErr!, 0);
            }

        }

        internal static class SpliceWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]output-stream.splice"), WasmImportLinkage]
            internal static extern void wasmImportSplice(int p0, int p1, long p2, nint p3);
        }

        public   unsafe ulong Splice(global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.InputStream src, ulong len)
        {
            var handle = this.Handle;
            var handle0 = src.Handle;

            var retArea = stackalloc ulong[2+1];
            var ptr = ((int)retArea) + (8 - 1) & -8;
            SpliceWasmInterop.wasmImportSplice(handle, handle0, unchecked((long)(len)), ptr);

            Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted7;

            switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                case 0: {

                    lifted7 = Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(unchecked((ulong)(BitConverter.ToInt64(new Span<byte>((void*)(ptr + 8), 8)))));
                    break;
                }
                case 1: {

                    global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                    switch (new Span<byte>((void*)(ptr + 8), 1)[0]) {
                        case 0: {
                            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 12), 4))));

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                            break;
                        }
                        case 1: {

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                            break;
                        }

                        default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 8), 1)[0]}");
                    }

                    lifted7 = Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                    break;
                }

                default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
            }
            if (lifted7.IsOk)
            {
                var tmp = lifted7.AsOk;
                return tmp;
            }
            else
            {
                throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted7.AsErr!, 0);
            }

        }

        internal static class BlockingSpliceWasmInterop
        {
            [DllImport("wasi:io/streams@0.2.0", EntryPoint = "[method]output-stream.blocking-splice"), WasmImportLinkage]
            internal static extern void wasmImportBlockingSplice(int p0, int p1, long p2, nint p3);
        }

        public   unsafe ulong BlockingSplice(global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.InputStream src, ulong len)
        {
            var handle = this.Handle;
            var handle0 = src.Handle;

            var retArea = stackalloc ulong[2+1];
            var ptr = ((int)retArea) + (8 - 1) & -8;
            BlockingSpliceWasmInterop.wasmImportBlockingSplice(handle, handle0, unchecked((long)(len)), ptr);

            Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError> lifted7;

            switch (new Span<byte>((void*)(ptr + 0), 1)[0]) {
                case 0: {

                    lifted7 = Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Ok(unchecked((ulong)(BitConverter.ToInt64(new Span<byte>((void*)(ptr + 8), 8)))));
                    break;
                }
                case 1: {

                    global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError lifted;

                    switch (new Span<byte>((void*)(ptr + 8), 1)[0]) {
                        case 0: {
                            var resource = new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error(new global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IError.Error.THandle(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 12), 4))));

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.LastOperationFailed(resource);
                            break;
                        }
                        case 1: {

                            lifted = global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError.Closed();
                            break;
                        }

                        default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 8), 1)[0]}");
                    }

                    lifted7 = Result<ulong, global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>.Err(lifted);
                    break;
                }

                default: throw new ArgumentException($"invalid discriminant: {new Span<byte>((void*)(ptr + 0), 1)[0]}");
            }
            if (lifted7.IsOk)
            {
                var tmp = lifted7.AsOk;
                return tmp;
            }
            else
            {
                throw new WitException<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IStreams.StreamError>(lifted7.AsErr!, 0);
            }

        }

    }

}
