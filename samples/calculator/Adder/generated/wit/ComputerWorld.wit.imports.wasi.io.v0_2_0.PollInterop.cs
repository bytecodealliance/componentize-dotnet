// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// <auto-generated />
#nullable enable

using System.Runtime.InteropServices;

namespace ComputerWorld.wit.imports.wasi.io.v0_2_0
{
    public static class PollInterop {

        internal static class PollWasmInterop
        {
            [DllImport("wasi:io/poll@0.2.0", EntryPoint = "poll"), WasmImportLinkage]
            internal static extern void wasmImportPoll(nint p0, int p1, nint p2);
        }

        public  static unsafe uint[] Poll(List<global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IPoll.Pollable> @in)
        {
            var cleanups = new List<Action>();

            void* address;
            if ((4 * @in.Count) < 1024) {
                var retArea = stackalloc uint[(1*@in.Count)+1];
                address = (void*)(((int)retArea) + (4 - 1) & -4);
            }
            else
            {
                var bufferSize = 4 * (nuint)@in.Count;
                address = NativeMemory.AlignedAlloc(bufferSize, 4);
                cleanups.Add(() => NativeMemory.AlignedFree(address));
            }

            for (int index = 0; index < @in.Count; ++index) {
                global::ComputerWorld.wit.imports.wasi.io.v0_2_0.IPoll.Pollable element = @in[index];
                int basePtr = (int)address + (index * 4);
                var handle = element.Handle;
                BitConverter.TryWriteBytes(new Span<byte>((void*)(basePtr + 0), 4), handle);

            }

            var retArea0 = stackalloc uint[2+1];
            var ptr = ((int)retArea0) + (4 - 1) & -4;
            PollWasmInterop.wasmImportPoll((int)address, @in.Count, ptr);

            var array = new uint[BitConverter.ToInt32(new Span<byte>((void*)(ptr + 4), 4))];
            new Span<uint>((void*)(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 0), 4))), BitConverter.ToInt32(new Span<byte>((void*)(ptr + 4), 4))).CopyTo(new Span<uint>(array));

            foreach (var cleanup in cleanups)
            {
                cleanup();
            }
            return array;

        }

    }
}
