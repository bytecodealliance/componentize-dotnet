<Project>
    <PropertyGroup>
        <WitBindgenToolTarget Condition="$([MSBuild]::IsOSPlatform('Windows'))">win</WitBindgenToolTarget>
        <WitBindgenToolTarget Condition="$([MSBuild]::IsOSPlatform('Linux'))">linux</WitBindgenToolTarget>
        <WitBindgenToolTarget Condition="$([MSBuild]::IsOSPlatform('OSX'))">osx</WitBindgenToolTarget>
        <WitBindgenToolTarget>$(WitBindgenToolTarget)-$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture.ToString().ToLower())</WitBindgenToolTarget>
        <WitBindgenExe>$(MSBuildThisFileDirectory)..\tools\$(WitBindgenToolTarget)\wit-bindgen</WitBindgenExe>
        <WitBindgenExe Condition="$([MSBuild]::IsOSPlatform('Windows'))">$(WitBindgenExe).exe</WitBindgenExe>
        <WkgExe>$(MSBuildThisFileDirectory)..\tools\$(WitBindgenToolTarget)\wkg</WkgExe>
        <WkgExe Condition="$([MSBuild]::IsOSPlatform('Windows'))">$(WkgExe).exe</WkgExe>
        
        <!-- We have to add this to the application's project because the codegen uses unsafe in marshalling -->
        <!-- An alternative would be to emit code that uses some kind of Wit.Runtime project that deals with the unsafe aspects -->
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    </PropertyGroup>
    
    <ItemDefinitionGroup>
        <Wit>
            <!-- On save, trigger a design-time build -->
            <Generator>MSBuild:Compile</Generator>
        </Wit>
    </ItemDefinitionGroup>

    <ItemGroup Condition="'$(Language)' == 'C#'">
        <PropertyPageSchema Include="$(MSBuildThisFileDirectory)Wit.CSharp.xml">
            <Context>File;BrowseObject</Context>
        </PropertyPageSchema>

        <Wit Include="*.wit;wit/*.wit" />

        <!-- Treats this itemgroup as a compilation input (e.g., changes affect VS fast up-to-date check, and generator is shown in properties pane) -->
        <AvailableItemName Include="Wit" />
    </ItemGroup>
</Project>
